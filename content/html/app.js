importScripts("https://cdn.jsdelivr.net/pyodide/v0.25.0/full/pyodide.js");

function sendPatch(patch, buffers, msg_id) {
  self.postMessage({
    type: 'patch',
    patch: patch,
    buffers: buffers
  })
}

async function startApplication() {
  console.log("Loading pyodide!");
  self.postMessage({type: 'status', msg: 'Loading pyodide'})
  self.pyodide = await loadPyodide();
  self.pyodide.globals.set("sendPatch", sendPatch);
  console.log("Loaded!");
  await self.pyodide.loadPackage("micropip");
  const env_spec = ['https://cdn.holoviz.org/panel/wheels/bokeh-3.4.0-py3-none-any.whl', 'https://cdn.holoviz.org/panel/1.4.2/dist/wheels/panel-1.4.2-py3-none-any.whl', 'pyodide-http==0.2.1', 'hvplot', 'pandas', 'param', 'pyecharts']
  for (const pkg of env_spec) {
    let pkg_name;
    if (pkg.endsWith('.whl')) {
      pkg_name = pkg.split('/').slice(-1)[0].split('-')[0]
    } else {
      pkg_name = pkg
    }
    self.postMessage({type: 'status', msg: `Installing ${pkg_name}`})
    try {
      await self.pyodide.runPythonAsync(`
        import micropip
        await micropip.install('${pkg}');
      `);
    } catch(e) {
      console.log(e)
      self.postMessage({
	type: 'status',
	msg: `Error while installing ${pkg_name}`
      });
    }
  }
  console.log("Packages loaded!");
  self.postMessage({type: 'status', msg: 'Executing code'})
  const code = `
  \nimport asyncio\n\nfrom panel.io.pyodide import init_doc, write_doc\n\ninit_doc()\n\n#!/usr/bin/env python\n# coding: utf-8\n\n# # Interface panel design\n# # Develop in [a notebook](https://panel.holoviz.org/tutorials/basic/develop_notebook.html)\n# * [Core concepts](https://panel.holoviz.org/getting_started/core_concepts.html)\n# * [Example: Declarative](https://panel.holoviz.org/explanation/api/examples/stocks_declarative.html)\n\n# In[1]:\n\n\n# Datapipeline\nimport pandas as pd\n\n\n\n# In[2]:\n\n\n# App and visualiation\nimport panel as pn\npn.extension('tabulator')\n\n\n# In[3]:\n\n\nlocale = 'zh_hans'\n\n\n# ## Data\n# ### ETL\n# #### Dataframes from parquet\n\n\n\n# In[5]:\n\n# In[6]:\n\n\n# #### Dictionaries from yml\n\n# In[7]:\n\n\n#locale="zh_hans"\n\n\n# In[8]:\n\n\n\nimport json\n\ndef read_json(fn):\n    with open(fn, 'r', encoding="utf8") as infile:       \n        data = json.load(infile)\n        return data\n\n# In[4]:\ndfN_locale = pd.read_pickle ('dfN_zh_hans.pickle')\ndfE_locale = pd.read_pickle ('dfE_zh_hans.pickle')\n#dfE_locale = pd.read_pickle ('https://github.com/oxon8/jupyterlite/raw/main/content/data/dfE_zh_hans.pickle')\n#dfN_locale = pd.read_pickle ('https://github.com/oxon8/jupyterlite/raw/main/content/data/dfN_zh_hans.pickle')\n\n# ### Minimal Efforts for Echarts/Tabulator\n\n# #### List of "selected" stuff\n# * legacy: CEADs_loaded.lists.keys() ['indicators_sel', 'reg_all', 'year_all', 'Mkind_all', 'locale_all', 'sel_indicators_MI', 'sel_indicators_MO']\n\n# In[9]:\n\n\nsel_cols_locale = ['code', 'zh_hant', 'en', 'zh_hans']\n\n\n# #### C1. Reg and Year\n\n# In[10]:\n\n\n## Reg and Year\nfor kind in ["year", "reg"]:\n    cmd0 = f"""{kind}_all = dict()"""\n    print (cmd0)\n    exec (cmd0)\n    for locale in sel_cols_locale:\n        fn = f'conf/{kind}_all-{locale}.json'\n        data_in = read_json(fn)\n        print (f"\\tLoading: {fn}", end='\\n')\n        cmd = f"""\\t\\t{kind}_all ['{locale}'] = data_in"""\n        print (cmd, end='\\n')\n        exec (cmd.strip('\\t'))\n\n\n# In[11]:\n\n\nyear_all[locale]\n\n\n# In[12]:\n\n\nreg_dict_UI = dict(zip(reg_all ['code'], reg_all ['zh_hans']))\nreg_dict_UI_joint = [":".join([k,v]) for k,v in reg_dict_UI.items()]\n\n\n# #### C2. Indicators\n\n# In[13]:\n\n\n# Loading both existig data, along with translation:\n#https://stackoverflow.com/questions/952914/how-do-i-make-a-flat-list-out-of-a-list-of-lists\nimport itertools\n\n# all_indicators, sel_indicators\nall_indicators = dict()\nsel_indicators = dict()\nall_indicators_list = dict()\nsel_indicators_list = dict()\n\nfor kind in ["all", "sel"]:\n    for locale in sel_cols_locale:\n        fn = f'conf/{kind}_indicators-{locale}.json'\n        print (f"Loading {fn}", end="\\t")\n        data = read_json(fn)\n        cmd = f'{kind}_indicators ["{locale}"] = data'\n        exec (cmd)\n        print (cmd)   \n\n        # flatten data.values() altogether\n        data_list = list(itertools.chain(*data.values()))\n        cmd1 = f'{kind}_indicators_list ["{locale}"] = data_list'\n        exec (cmd1)\n        print (cmd1)   \n\n        \nprint ( sel_indicators ["zh_hans"] )\nprint ( sel_indicators_list ["zh_hans"] )\n\n\n# #### C3. Color and Translation \n\n# In[14]:\n\n\n# Loading both color and dict_trans\nd_color = dict()\nd_trans = dict()\n\nfor locale in sel_cols_locale:\n    # color dictionaries\n    fn = f'conf/Industry_Classification_Color-{locale}.json'\n    dict_color = read_json(fn)\n    \n    # translation dictionaries\n    fn = f'conf/Translation-{locale}.json'\n    dict_trans = read_json(fn)\n    # shorter variable names\n    \n    d_trans[locale] = dict_trans\n    d_color[locale] = dict_color['tab10_hex']\n\nprint (d_color[locale])\n\n\n# In[15]:\n\n\nprint (d_trans[locale]['True'])\n\n\n# #### CX. UI_label\n\n# In[16]:\n\n\nUI_label = {\n    'zh': {\n        "DashboardTitle": '\u4e2d\u56fd\u5404\u7701\u5404\u884c\u4e1a\u8131\u78b3\u8def\u7ebf\uff1a\u6295\u5165\u4ea7\u51fa\u7f51\u7edc\u4eea\u8868\u76d8',\n        "url_prj-visNetZero": "https://oxon8.netlify.app/visualization/prj-visNetZero/index.zh",\n        'Select year': '\u9009\u62e9\u5e74\u4efd',\n        'Select region': '\u9009\u62e9\u5730\u533a',\n        'Input region autocomplete': '\u8f93\u5165\u5730\u533a\uff08\u81ea\u52a8\u8865\u9f50\uff09',\n        'Select main indicator': '\u9009\u62e9\u6307\u6807\uff08\u4e3b\u8981\uff09',\n        'Select secondary indicator': '\u9009\u62e9\u6307\u6807\uff08\u6b21\u8981\uff09',\n        'Select any indicator': '\u9009\u62e9\u6307\u6807\uff08\u4efb\u9009\uff09',\n        'Node': '\u884c\u4e1a\uff1a\u8282\u70b9',\n        'Edge': '\u884c\u4e1a\u95f4\u6295\u5165\u4ea7\u51fa\uff1a\u8fb9\u7f18',\n        'Main': '\u4e3b\u8981',\n        'Secondary': '\u6b21\u8981',\n        'Any': '\u4efb\u9009',\n        "fTab Node Description": "\u6b64\u5904\u8ba1\u6709 {N_indicators_available} (\u539f\u6570\u636e\u5171 {N_indicators}) \u6307\u6807\uff0c\u5bf9\u4ea7\u4e1a\u7684\u4ea7\u503c\u53ca\u73af\u5883\u5f71\u54cd\u8fdb\u884c\u63a2\u7a76\u6bd4\u8f83\u3002",\n        "fTab Edge Description": "\u6b64\u5904\u5217\u51fa\u6700\u9ad8\u6295\u5165\u4ea7\u51fa\u5173\u7cfb\uff0c\u80fd\u5bf9\u8be5\u5730\u533a\u4e3b\u8981\u4ea7\u4e1a\u95f4\u6d3b\u52a8\u8fdb\u884c\u63a2\u7a76\u6bd4\u8f83\uff0c\u5171\uff1a",\n        "### Explore a year and place": "### \u6bd4\u8f83\u5404\u65f6\u533a\u5404\u5e74\u4efd",\n        "### Focus a main indicator": "### \u805a\u7126\u63a2\u7d22\u4e3b\u8981\u6307\u6807",\n        "### Adjust the network": "### \u8c03\u6574\u7f51\u7edc\u53c2\u6570",\n        "Visualization parameters": "\u8c03\u6574\u53ef\u89c6\u5316\u53c2\u6570",\n        "Slider Gravity": '\u5f15\u529b\u8c03\u8bd5',\n        "Slider Repulsion": '\u65a5\u529b\u8c03\u8bd5',\n        "Interactivity Tips": "\u6570\u636e\u4eea\u8868\u76d8\u4ea4\u4e92\u529f\u80fd\u8bf4\u660e",\n    },\n    'en': {\n        "DashboardTitle": 'Decarbonizaton roadmap for Chinese industries and provinces\uff1aInput-Output Network Dashboard',\n        "url_prj-visNetZero": "https://oxon8.netlify.app/en/visualization/prj-visNetZero/index.en",\n        'Select year': 'Select year',\n        'Select region': 'Select region',\n        'Input region autocomplete': 'Input region (autocomplete)',\n        'Select main indicator': 'Select indicator (main)',\n        'Select secondary indicator': 'Select indicator (secondary)',\n        'Select any indicator': 'Select indicator (any)',\n        'Node': 'Industry--Node',\n        'Edge': 'Industry In/Output--Edge',\n        'Main': 'Main',\n        'Secondary': 'Secondary',\n        'Any': 'Any',\n        "fTab Node Description": "There are {N_indicators_available} (out of {N_indicators}) made available here. Please compare the financial and environmental impacts of industries.",\n        "fTab Edge Description": "\u6b64\u5904\u5217\u51fa\u524d {N_edges} \u9ad8\u7684\u6295\u5165\u4ea7\u51fa\u503c\uff0c\u80fd\u5bf9\u8be5\u5730\u533a\u4e3b\u8981\u4ea7\u4e1a\u95f4\u6d3b\u52a8\u8fdb\u884c\u63a2\u7a76\u6bd4\u8f83\u3002",\n        "### Explore an year and place": "### Explore an year and place",\n        "### Adjust the network": "### Adjust the network",\n        "Visualization parameters": "Visualization parameters",\n        "Slider Gravity": 'Adjust gravity',\n        "Slider Repulsion": 'Adjust repulsion',\n        "Interactivity Tips": "Interactivity Tips",\n    },\n}\n\nUI_label['zh_hans'] = { k:v for k,v in UI_label['zh'].items() }\nUI_label['zh_hans']\n\n\n# In[17]:\n\n\nUI_label[locale]['Select year']\n\n\n# In[18]:\n\n\nd_trans['zh_hant']['Indicator']\n\n\n# ## fstring\n\n# In[19]:\n\n\ndef convert_further_anyway(fstring_text, debug=False):\n    if "</style>" in fstring_text:\n        fstring_text_CSS_block  = fstring_text.split("</style>")[0] + "</style>"\n        fstring_text_to_process = fstring_text.split("</style>")[1] + "</style>"\n        return fstring_text_CSS_block + eval(f'f"""{fstring_text_to_process}"""')\n    else:\n        fstring_text_to_process = fstring_text\n        return eval(f'f"""{fstring_text_to_process}"""')\n# ---------------------------------------------------------------------------------\n\n\n# In[20]:\n\n\nIndicators_with_ttips = list ( dfN_locale [ ~dfN_locale.ttips.isna() ].index.unique(level='Indicator') )\nIndicators_Main = Indicators_with_ttips\nIndicators_Main\n\n\n# In[21]:\n\n\nIndicators_Secondary = [x for x in sel_indicators_list[locale] if x not in Indicators_Main]\nprint (Indicators_Secondary)\n\n\n# In[22]:\n\n\nprint ( sel_indicators_list[locale] )\n\n\n# # Elaborate App\n# \n\n# In[23]:\n\n\n### Modules required\nimport panel as pn\npn.extension('echarts')  # ECharts\nimport pandas as pd\nimport hvplot.pandas\nimport param\n\nimport pyecharts.options as opts\nfrom pyecharts.charts import Graph\n\n\n# ## preparations for class CEADsExplorer\n# ### list of stuff\n\n# In[24]:\n\n\nN_indicators_available, N_indicators  = len(sel_indicators_list[locale]), len(all_indicators_list[locale])\nN_indicators, N_indicators_available\n\n\n# In[25]:\n\n\n# checklists\nprint (reg_dict_UI_joint)\nprint (year_all [locale])\nprint (Indicators_Main)\nprint (Indicators_Secondary)\nprint (sel_indicators_list[locale])\n\n# similar: first two ['reg', 'year']\n# different: last two ['Indicator', 'Node'] -- ['Input', 'Output']\n# dfN : r, y, i, n\n# dfE : r, y, ei, eo\ndfN_locale.index.names, dfE_locale.index.names\n\n\n# In[26]:\n\n\ndfE_locale.columns\n\n\n# ### Numberformatter for tabulator\n# * dfN_locale/dfN:\n#     * percentage: 'pctl' 'perc'\n#     * complex (indicator based): 'value'\n\n# In[27]:\n\n\n# code reuse: tabulator + NumberFormatter\nfrom bokeh.models.widgets.tables import NumberFormatter, BooleanFormatter\npn.extension('tabulator')\n\ndef generate_bokeh_formatters (columns_fmtstr,  d_trans=d_trans, locale=locale):\n    bokeh_formatters = { d_trans[locale][k]: NumberFormatter(format=format_str) for k, format_str in columns_fmtstr.items() }\n    return bokeh_formatters\n\ncol_fmt_dict = {"value":'0,0.000',"perc":'0.00%',"pctl":'0.00%'}\ncol_fmt_dict_bokeh = generate_bokeh_formatters(col_fmt_dict)\n# to be used at  pn.widgets.Tabulator(TBL, formatters=col_fmt_dict_bokeh, ...\ncol_fmt_dict_bokeh\n\n\n# In[28]:\n\n\ndfE_locale.loc[:,'IfIntra'].astype(str).map(d_trans[locale])\n\n\n# In[29]:\n\n\ndfE_locale.loc[:,'IfIntra']=dfE_locale.loc[:,'IfIntra'].astype(str).map(d_trans[locale])\n\n\n# ## class CEADsExplorer\n\n# In[30]:\n\n\nclass CEADsExplorer(param.Parameterized):\n    ## Data directly initiated and load\n    sel_reg_localeJ = param.Selector(objects=reg_dict_UI_joint )#reg_all [locale] )   \n    sel_year_locale = param.Selector(objects=year_all [locale]) \n    sel_indicator_main      = param.Selector(objects=Indicators_Main)\n    sel_indicator_secondary = param.Selector(objects=Indicators_Secondary)\n    sel_indicator_tertiary  = param.Selector(objects=sel_indicators_list[locale])  \n    # class atrributes: dfN; dfE; sel_reg_localeJ; sel_year_locale; sel_indicator_main   all param!\n    ## Data directly initiated and load\n    dfN = param.DataFrame(dfN_locale.sort_index() )  # wrapped with param\n    dfE = param.DataFrame(dfE_locale.sort_index() )  # wrapped with param\n    \n    # define action model \n    # TBA: tabulator selection \n    #   selectable = 'checkbox', selection = []\n    def translate_df_columns (self, df, d_trans=d_trans, locale=locale):\n        return (df.rename (columns=d_trans[locale]))\n    def widget_Tabulator_wrapper (self, df, NorE = "N"):\n        if NorE == "N":\n            tabulator_filters = {\n                '\u8282\u70b9': {'type': 'list', 'func': 'in', 'valuesLookup': True, 'sort': 'asc', 'multiselect': True},\n                '\u503c':  {'type': 'number', 'func': '>=', 'placeholder': '\u8f93\u5165\u6700\u5c0f\u503c\u8fc7\u6ee4'},\n            }\n            TBL = pn.widgets.Tabulator (df, show_index=False, pagination='local', page_size=Tabulator_page_size, theme = "fast", \n                                    formatters=col_fmt_dict_bokeh, text_align="right",\n                                    header_filters=tabulator_filters)\n        elif NorE == "E":\n            tabulator_filters = {\n                '\u6295\u5165': {'type': 'list', 'func': 'in', 'valuesLookup': True, 'sort': 'asc', 'multiselect': True},\n                '\u4ea7\u51fa': {'type': 'list', 'func': 'in', 'valuesLookup': True, 'sort': 'asc', 'multiselect': True},\n                '\u884c\u4e1a\u5185': {'type': 'list', 'func': 'in', 'valuesLookup': True, 'multiselect': True},\n                '\u503c':  {'type': 'number', 'func': '>=', 'placeholder': '\u8f93\u5165\u6700\u5c0f\u503c\u8fc7\u6ee4'},\n            }\n            TBL = pn.widgets.Tabulator (df, show_index=False, pagination='local', page_size=Tabulator_page_size, theme = "fast", \n                                    formatters=col_fmt_dict_bokeh, text_align="right",\n                                    header_filters=tabulator_filters )\n        return TBL\n    \n    def process_param_r (self, r):\n        try:\n            reg = r.split(':')[1]\n        except:\n            reg = r\n        return (reg)\n\n    def get_df (self, r, y, i=slice(None), n=slice(None),\n                            ei=slice(None), eo=slice(None), NorE = "N"):\n        # processing r\n        reg = self.process_param_r (r)\n        if NorE == "N":\n            df = self.dfN.loc[(reg,y,n,i),:].reset_index()\\\n                         .sort_values('value', ascending=False)\n        elif NorE == "E":\n            df = self.dfE.loc[(reg,y,ei,eo),:].reset_index()\\\n                         .sort_values('value', ascending=False)\n        return  df\n    \n    def get_df_len (self, r, y, i=slice(None), n=slice(None),\n                            ei=slice(None), eo=slice(None), NorE = "N"):\n        df = self.get_df(r=r,y=y,i=i,n=n,ei=ei,eo=eo,NorE=NorE)         \n        return  len(df)\n    \n    def get_df_with_col_translated ( self, r, y, \n                                     i=slice(None), n=slice(None), ei=slice(None), eo=slice(None),\n                                     actions=["TBL_N_remove_cols","translate"], NorE = "N"):\n        # get datasource        \n        df = self.get_df (r,y,i=i,n=n,ei=ei,eo=eo, NorE = NorE)\n        # process actions\n        if "TBL_N_remove_cols" in actions:\n            ## clean up two columns for Tabulator\n            df = df.drop(['weight','ttips'], axis=1) \n        if "TBL_E_remove_cols" in actions:\n            ## clean up one column for Tabulator\n            df = df.drop(['weight'], axis=1) \n        if "translate" in actions:\n            df = self.translate_df_columns (df)\n        return  df\n        \n    def get_TBL (self, r, y, i=slice(None), n=slice(None), ei=slice(None), eo=slice(None), NorE = "N"):\n        if NorE == "N":\n            df = self.get_df_with_col_translated (r,y,i=i,n=n,ei=ei,eo=eo, actions= ["TBL_N_remove_cols","translate"], NorE = NorE)\n            TBL = self.widget_Tabulator_wrapper (df, NorE = NorE )\n        elif NorE == "E":\n            df = self.get_df_with_col_translated (r,y,i=i,n=n,ei=ei,eo=eo, actions= ["TBL_E_remove_cols","translate"], NorE = NorE)\n            TBL = self.widget_Tabulator_wrapper (df, NorE = NorE )\n        return  TBL\n\nmyExplorer = CEADsExplorer()\n\n\n# ## Panel outline and design\n\n# ### Layout_width defined for pn.template.FastGridTemplate\n\n# In[31]:\n\n\n### Layout_width\nLayout_width = {"en":{"sidebar":250, "OverlayMain":790, "Echart":1000, "Selector_default":200,\n                      "Tabulator_column_width":165, 'Tabulator_column_width_IndicatorsAcross':  [200, 135, 85, 90,90, 135, 85] },\n                "zh_hans":{"sidebar":240, "OverlayMain":800, "Echart":1000, "Selector_default":200, \n                      "Tabulator_column_width":105, 'Tabulator_column_width_IndicatorsAcross':  [180, 90, 80,  90,90,  90, 80] }\n               }\n\n### Tabulator Size\nTabulator_page_size = 10\n\n# wider for locale en\n\n\n# ### Sidebar\n\n# In[32]:\n\n\nmd_Interactivity_Tips ="""\n1. ***\u9f20\u6807\u60ac\u6d6e(hover)***\u7f51\u7edc**\u8282\u70b9\u53ca\u8fb9\u7f18**\uff0c\u53ef\u89c1\u5b9e\u9645\u6570\u636e\u4fe1\u606f\u3002\n2. ***\u8c03\u6574***\u4e3b\u56fe**\u89c6\u56fe\u754c\u9650**\uff0c\u8bf7\u5229\u7528\u4e3b\u56fe\u4e0b\u65b9\u7684**\u8303\u56f4\u9009\u62e9\u5668**\uff0c\u6216\u4f7f\u7528\u53f3\u65b9\u7684**\u653e\u5927\u53ca\u62d6\u62fd\u5de5\u5177**\n3. ***\u6392\u5e8f***\u9644\u8868**\u6570\u636e\u5927\u5c0f**\uff0c\u5404\u8868\u683c\u7684\u5404\u884c\u6570\u636e\u5747\u53ef\u70b9\u51fb\u6309**\u5927\u81f3\u5c0f**\u6216**\u5c0f\u81f3\u5927**\u6392\u5e8f\n4. \u5404\u4e3b\u56fe\u53ca\u9644\u8868\u5747\u53ef\u8c03\u6574\uff1a\n    * \u7a97\u53e3**\u5927\u5c0f**\uff08\u81f3\u53f3\u4e0b\u89d2\u6309\u53d6**\u8c03\u6574**\u63a7\u4ef6\uff09\n    * **\u5168\u5c4f**\u7a97\u53e3\uff08\u81f3\u53f3\u4e0a\u89d2\u6309\u53d6**\u5168\u5c4f**\u63a7\u4ef6\uff09\n    * \u7a97\u53e3**\u4f4d\u7f6e**\uff08\u81f3\u5de6\u4e0a\u89d2\u6309\u53d6**\u62d6\u62fd**\u63a7\u4ef6\uff095. \n6. ***\u8fc7\u6ee4\u6bd4\u8f83*** \u5404\u9644\u8868\u6570\u636e\uff0c\u53ef\u89c1\u5b9e\u9645\u6570\u636e\u4fe1\u606f\n---\n\u2764\ufe0f\u611f\u8c22Python\u5f00\u6e90\u6570\u636e\u53ef\u89c6\u5316\u9879\u76ee[Holoviz](https://holoviz.org/about.html)\u53ca\u6570\u636e\u5206\u6790\u9879\u76ee[pandas](https://pandas.pydata.org/)\u53ca [scipy](https://scipy.org/)\u3002\n"""\n\n\n# In[33]:\n\n\n### Parameters actualized\n## Widgets: year, regX2, indicator\n# reg\nwidget_reg_select        = pn.widgets.Select.from_param ( myExplorer.param["sel_reg_localeJ"], \n    width=Layout_width[locale][ "Selector_default"], name=UI_label[locale]['Select region'])\nwidget_reg_autocomplete  = pn.widgets.AutocompleteInput.from_param ( myExplorer.param["sel_reg_localeJ"], \n    width=Layout_width[locale][ "Selector_default"], name=UI_label[locale]['Input region autocomplete'], case_sensitive=False, search_strategy='includes', min_characters=1,\n    placeholder='GD')\n# year\nwidget_year_slider = pn.widgets.DiscreteSlider.from_param ( myExplorer.param.sel_year_locale, \n    width=Layout_width[locale][ "Selector_default"], name=UI_label[locale]['Select year'], value=reg_all [locale][0])\n# indicator\nwidget_indicator_main_sel= pn.widgets.Select.from_param ( myExplorer.param["sel_indicator_main"], \n    width=Layout_width[locale][ "Selector_default"], name=UI_label[locale]['Select main indicator'], value=Indicators_Main[0])\nwidget_indicator_secondary_sel= pn.widgets.Select.from_param ( myExplorer.param["sel_indicator_secondary"], \n    width=Layout_width[locale][ "Selector_default"], name=UI_label[locale]['Select secondary indicator'], value=Indicators_Secondary[0])\nwidget_indicator_tertiary_sel= pn.widgets.Select.from_param ( myExplorer.param["sel_indicator_tertiary"], \n    width=Layout_width[locale][ "Selector_default"], name=UI_label[locale]['Select any indicator'], value=Indicators_Secondary[-3])\n\n# Graph\nwg_slider_gravity   = pn.widgets.FloatSlider(name=UI_label[locale]['Slider Gravity'], \n                                             width=Layout_width[locale][ "Selector_default"],\n                                             #width = int(Layout_width[locale]["Echart"] *.45),\n                                             start=0.05, end=.95, step=0.05, value=0.7)\nwg_slider_repulsion = pn.widgets.IntSlider  (name=UI_label[locale]['Slider Repulsion'], \n                                             width=Layout_width[locale][ "Selector_default"],\n                                             #width = int(Layout_width[locale]["Echart"] *.45),\n                                             start=100, end=2000, step=100, value=1700)\n\n# Widgets Bind\nTBL_E_interactive = pn.bind( myExplorer.get_TBL, \n                       r=myExplorer.param.sel_reg_localeJ, \n                       y=myExplorer.param.sel_year_locale,\n                       #ei=slice(None), eo=slice(None), \n                       NorE = "E"                            \n                     )\nTBL_N_interactive_01 = pn.bind( myExplorer.get_TBL, \n                       r=myExplorer.param.sel_reg_localeJ, \n                       y=myExplorer.param.sel_year_locale,\n                       i=myExplorer.param.sel_indicator_main,\n                     )\nTBL_N_interactive_02 = pn.bind( myExplorer.get_TBL, \n                       r=myExplorer.param.sel_reg_localeJ, \n                       y=myExplorer.param.sel_year_locale,\n                       i=myExplorer.param.sel_indicator_secondary,\n                     )\nTBL_N_interactive_03 = pn.bind( myExplorer.get_TBL, \n                       r=myExplorer.param.sel_reg_localeJ, \n                       y=myExplorer.param.sel_year_locale,\n                       i=myExplorer.param.sel_indicator_tertiary,\n                     )\n\npn_sidebar = pn.Column( UI_label[locale]["### Explore a year and place"],\n                        widget_year_slider, widget_reg_select, widget_reg_autocomplete, \n                        pn.layout.Divider(),\n                        UI_label[locale]["### Focus a main indicator"],\n                        widget_indicator_main_sel,\n                        pn.layout.Divider(),\n                        UI_label[locale]["### Adjust the network"],\n                        pn.pane.Str(UI_label[locale]["Visualization parameters"]),\n                        wg_slider_gravity, wg_slider_repulsion, \n                        pn.Accordion( objects = [ pn.pane.Markdown (md_Interactivity_Tips, name=UI_label[locale]["Interactivity Tips"])] ),\n  margin = 0,\n)\n\npn_sidebar\n\n\n# ### Tabs: Data Nodes/Edges\n\n# #### Widget Tabs:  CSS styles\n\n# In[34]:\n\n\n##### Widget Tabs:  CSS styles\nraw_css_custom_tabs = """\n.bk-header {\n    font-size: 18pt;\n}\n.bk-tab.bk-active {\n    color:#4d4d4d;\n    border-color: #002147 !important;\n    border-bottom-width: 7px;\n}\n:host .bk-tab:nth-of-type(1) {\n    background-color: #fdc086 !important;\n}\n:host .bk-tab:nth-of-type(2) {\n    background-color: #beaed4 !important;\n}\n"""\nraw_css_custom_tabs_Node = """\n.bk-header {\n    font-size: 16pt;\n}\n:host(.bk-above) .bk-tab{\n    min-width: 220px;\n}\n.bk-tab.bk-active {\n    color:#4d4d4d;\n    border-color: #002147 !important;\n    border-bottom-width: 3px;\n}\n:host .bk-tab:nth-of-type(1) {\n    background-color: #9bbf7c !important;\n}\n:host .bk-tab:nth-of-type(2) {\n    background-color: #b8d9d4 !important;\n}\n:host .bk-tab:nth-of-type(3) {\n   background-color: #d3e1f2 !important;\n}\n"""\n\n\n# In[ ]:\n\n\n\n\n\n# In[35]:\n\n\npn.Row (TBL_E_interactive)\n\n\n# In[36]:\n\n\nUI_label[locale]['Any']\n\n\n# #### Tab: Node -----> pn_Node\n\n# In[37]:\n\n\n### pn_Node\npn.extension(design='fast')     \npn_Node_tabs = pn.Tabs( (UI_label[locale]['Main'], TBL_N_interactive_01),\n                         (UI_label[locale]['Secondary'], TBL_N_interactive_02),\n                         (UI_label[locale]['Any'], TBL_N_interactive_03),\n                        stylesheets=[raw_css_custom_tabs_Node],\n)\n# CSS raw_css_custom_tabs_Node used\npn_Node = pn.Column( \n    pn.Row( convert_further_anyway(UI_label[locale]["fTab Node Description"])  ),\n    pn.Row( widget_indicator_main_sel, widget_indicator_secondary_sel, widget_indicator_tertiary_sel),\n    pn_Node_tabs\n)\n\npn_Node\n\n\n# #### Tab: Edge -----> pn_Edge\n\n# In[38]:\n\n\nTBL_E_interactive_len = pn.bind( myExplorer.get_df_len, \n                       r=myExplorer.param.sel_reg_localeJ, \n                       y=myExplorer.param.sel_year_locale,\n                       #ei=slice(None), eo=slice(None), \n                       NorE = "E"                            \n                     )\n\n\n# In[39]:\n\n\n### pn_Edge\npn.extension(design='fast') \npn_Edge = pn.Column( \n    pn.Row( pn.pane.Str(UI_label[locale]["fTab Edge Description"]), TBL_E_interactive_len ),\n    TBL_E_interactive\n)\n\npn_Edge\n\n\n# #### Intergration\n\n# In[40]:\n\n\n## Putting pn_Edge and pn_Node into another Tab\npn_tabs_primary = pn.Tabs(\n    (UI_label[locale]["Node"], pn_Node),\n    (UI_label[locale]["Edge"], pn_Edge),\n    stylesheets=[raw_css_custom_tabs],\n)\n# CSS raw_css_custom_tabs used\n\n#pn_tabs_primary\n\n\n# In[ ]:\n\n\n\n\n\n# ### Echarts \n# #### Interactive Wigdets for Gravity and Repulsion\n# cf. \n# \n# #r=myExplorer.param.sel_reg_localeJ, \n# #y=myExplorer.param.sel_year_locale,\n# r=myExplorer.sel_reg_localeJ \n# y=myExplorer.sel_year_locale\n# \n\n# In[41]:\n\n\n# pn.bind(gen_Network_Graph, myExplorer.param.sel_reg_localeJ, myExplorer.param.sel_year_locale, myExplorer.param.sel_indicator_main)\ndef gen_Network_Graph (r, y, i, repulsion, gravity):\n    GdfN = myExplorer.get_df ( r=r, y=y, i=i)\\\n           .dropna() # remove any nodes with no weight values\n    GdfN.loc[:,'ttips'] = GdfN.loc[:,'ttips'].str.replace('\\n', '<br/>')\n    \n    GdfE = myExplorer.get_df ( r=r, y=y, NorE = "E")\n\n    # Echart_nodes\n    Echart_nodes = [\n        opts.GraphNode( name=row['Node'], \n                        value=row['value'],\n                        symbol_size=row['weight'],\n                        tooltip_opts=opts.TooltipOpts(formatter=row['ttips']),\n                        itemstyle_opts=opts.ItemStyleOpts(color=d_color[locale][row['Node']]),\n                        label_opts=opts.LabelOpts(color="white", font_size=8+int(20*row['weight'])/75),\n                      )\n    for ind, row in GdfN.reset_index().iterrows() ]\n    # Echart_edges\n    Echart_edges = [\n        opts.GraphLink( source=row["Input"], target=row["Output"], value=row["value"], \n                        linestyle_opts=opts.LineStyleOpts(width=row["weight"], curve=0.33, opacity=0.25),                    \n                      )\n    for ind, row in GdfE.reset_index().iterrows() ]  \n    _plot_title_ = f"\u4ea7\u4e1a\u6295\u5165\u4ea7\u51fa\u7f51\u7edc\\n({r}, {y}, {i})"#"Input-Output Network of Industries"\n    \n    Echart_Graph = ( Graph().add(\n        series_name=f"({r}, {y})",\n        nodes=Echart_nodes, links=Echart_edges,\n        layout="force", #"circular"\n        repulsion=repulsion, gravity=gravity,\n        edge_length=[10,50],\n        is_roam=True, is_focusnode=True, is_draggable=True,\n        label_opts = opts.LabelOpts(is_show=True),\n        tooltip_opts = opts.TooltipOpts(formatter='{b}: <br />{c}'),\n    )\n    .set_series_opts( \n    #    textstyle_opts  = opts.TextStyleOpts( font_size=36, border_color='black', border_width=12, shadow_color='white') ,\n    #    itemstyle_opts  = opts.ItemStyleOpts(  border_color='black', border_width=12) ,\n        label_opts = opts.LabelOpts (font_size=16, rotate=0, text_border_width=3, text_border_color='black',\n                           text_shadow_color = "whitesmoke", text_shadow_blur = .1, text_shadow_offset_x = .2, text_shadow_offset_y =.2)\n        \n    )\n    .set_global_opts( \n        title_opts = opts.TitleOpts(title=_plot_title_) \n    )\n    #.render("debug.html")\n    )\n    return Echart_Graph\n\n\n# In[42]:\n\n\n## Getting Interactive Graph and Putting it in the Panel\nEchart_Graph_inter = pn.bind( gen_Network_Graph, \n                               myExplorer.param.sel_reg_localeJ, myExplorer.param.sel_year_locale, myExplorer.param.sel_indicator_main,\n                               wg_slider_repulsion, wg_slider_gravity)\n\n## Layout: Use panel container\npn.extension ("echarts")\npn_Echart_Graph = pn.Row ( pn.pane.ECharts( Echart_Graph_inter, width=Layout_width[locale]["Echart"], height=850),\n                           pn_sidebar\n                         )\n                  \npn_Echart_Graph\n\n\n# In[ ]:\n\n\n\n\n\n# ## Tempalte_Param\n\n# In[43]:\n\n\n### template_param to be used in pn.template.FastGridTemplate\nDashboardTitle = UI_label[locale]["DashboardTitle"]\n\ntemplate_param= dict(\n    title = DashboardTitle,\n    main_max_width= "1000px",\n    theme_toggle=True,    \n    sidebar_width = Layout_width[locale]["sidebar"],\n    sidebar = pn_sidebar,\n    sidebar_footer = f"""<fast-breadcrumb><fast-breadcrumb-item href="https://oxon8.netlify.app">\xa9 2024 Oxford Roadmapping </fast-breadcrumb-item>\n    <fast-breadcrumb-item href="https://creativecommons.org/licenses/by-nc-nd/4.0">CC BY NC ND 4.0</fast-breadcrumb-item>\n    <fast-breadcrumb-item href="{UI_label[locale]['url_prj-visNetZero']}">visNetZero</fast-breadcrumb-item></fast-breadcrumb>""",\n    header_background="#002147", # Oxford blue color https://www.colorxs.com/palette/hex/002147-a3ced9-dae5f2\n    accent_base_color="#DAA520", # https://panel.holoviz.org/reference/templates/FastGridTemplate.html\n    prevent_collision=False,\n    meta_description = DashboardTitle + " by Oxford Roadmapping",\n    meta_keywords = "China; decarbonization; carbon emission; net zero; roadmapping;",\n    meta_author = "Han-Teng Liao",\n)\n"""\n    logo ="https://oxon8.netlify.app/icon.svg",#"https://oxon8.netlify.app/favicon.ico",\n    favicon = "https://oxon8.netlify.app/favicon.ico",\n    site_url = "https://oxon8.netlify.app/",\n    base_url = "https://oxon8.netlify.app/project/prj-visCEADs/",\n"""\n\n\n### PNtemplate Constructed using  pn.template.FastGridTemplate  \nif "zh" in locale:\n    PNtemplate = pn.template.FastGridTemplate(\n        font_url = 'https://fonts.loli.net/css?family=Open+Sans',\n        **template_param\n    )\nelse:\n    PNtemplate = pn.template.FastGridTemplate(\n        **template_param\n    )\n\n### Panel alltogether\n# Note. main figure and tabs added here: pn_sidebar\n#pn_ichart = pn.Column( NdOvl, w_YEAR_RANGE, sizing_mode="stretch_both", margin = 0 )\n\n#pn_ichart = pn.Column( )\n\nPNtemplate.main [0:3,0:12] = pn_Echart_Graph\nPNtemplate.main [3:7,0:12] = pn_tabs_primary\n\n\n# In[44]:\n\n\nlocale\n\n\n# In[46]:\n\n\nPNtemplate.servable()#. # okay\n\n\n# In[ ]:\n\n\n\n\n\n\nawait write_doc()
  `

  try {
    const [docs_json, render_items, root_ids] = await self.pyodide.runPythonAsync(code)
    self.postMessage({
      type: 'render',
      docs_json: docs_json,
      render_items: render_items,
      root_ids: root_ids
    })
  } catch(e) {
    const traceback = `${e}`
    const tblines = traceback.split('\n')
    self.postMessage({
      type: 'status',
      msg: tblines[tblines.length-2]
    });
    throw e
  }
}

self.onmessage = async (event) => {
  const msg = event.data
  if (msg.type === 'rendered') {
    self.pyodide.runPythonAsync(`
    from panel.io.state import state
    from panel.io.pyodide import _link_docs_worker

    _link_docs_worker(state.curdoc, sendPatch, setter='js')
    `)
  } else if (msg.type === 'patch') {
    self.pyodide.globals.set('patch', msg.patch)
    self.pyodide.runPythonAsync(`
    from panel.io.pyodide import _convert_json_patch
    state.curdoc.apply_json_patch(_convert_json_patch(patch), setter='js')
    `)
    self.postMessage({type: 'idle'})
  } else if (msg.type === 'location') {
    self.pyodide.globals.set('location', msg.location)
    self.pyodide.runPythonAsync(`
    import json
    from panel.io.state import state
    from panel.util import edit_readonly
    if state.location:
        loc_data = json.loads(location)
        with edit_readonly(state.location):
            state.location.param.update({
                k: v for k, v in loc_data.items() if k in state.location.param
            })
    `)
  }
}

startApplication()